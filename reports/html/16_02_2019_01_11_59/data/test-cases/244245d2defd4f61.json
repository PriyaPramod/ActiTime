{
  "uid" : "244245d2defd4f61",
  "name" : "test_script_one[Firefox]",
  "fullName" : "test_scripts.test_sample#test_script_one[Firefox]",
  "historyId" : "8c968858849e1f674abd1bc72030dcd0",
  "time" : { },
  "status" : "broken",
  "statusMessage" : "FileNotFoundError: [WinError 3] The system cannot find the path specified: './resources/drivers/geckodriver'",
  "statusTrace" : "request = <SubRequest 'configuration' for <Function test_script_one[Firefox]>>\n\n    @pytest.fixture(scope=\"function\", autouse=True, params=[\"Chrome\", \"Firefox\"])\n    def configuration(request):\n        # browser_name = excel.get_cell_value(constants.EXCEL_PATH, \"BrowserSetting\", 0, \"Browser\")\n        url = excel.get_cell_value(constants.EXCEL_PATH, \"BrowserSetting\", 0, \"URL\")\n        web_driver = None\n        if request.param == \"Chrome\":\n            web_driver = create_driver(request.param, url)\n        elif request.param == \"Firefox\":\n>           web_driver = create_driver(request.param, url)\n\nconftest.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsource\\lib\\webdriver_manager.py:11: in create_driver\n    driver = webdriver.Firefox(constants.GECKO_PATH)\nC:\\Users\\PriyaPramod\\AppData\\Local\\Programs\\Python\\Python36-32\\lib\\site-packages\\selenium\\webdriver\\firefox\\webdriver.py:151: in __init__\n    firefox_profile = FirefoxProfile(firefox_profile)\nC:\\Users\\PriyaPramod\\AppData\\Local\\Programs\\Python\\Python36-32\\lib\\site-packages\\selenium\\webdriver\\firefox\\firefox_profile.py:80: in __init__\n    ignore=shutil.ignore_patterns(\"parent.lock\", \"lock\", \".parentlock\"))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsrc = './resources/drivers/geckodriver'\ndst = 'C:\\\\Users\\\\PRIYAP~1\\\\AppData\\\\Local\\\\Temp\\\\tmpnkrxubmz\\\\webdriver-py-profilecopy'\nsymlinks = False\nignore = <function ignore_patterns.<locals>._ignore_patterns at 0x08F5DED0>\ncopy_function = <function copy2 at 0x034B29C0>, ignore_dangling_symlinks = False\n\n    def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n                 ignore_dangling_symlinks=False):\n        \"\"\"Recursively copy a directory tree.\n    \n        The destination directory must not already exist.\n        If exception(s) occur, an Error is raised with a list of reasons.\n    \n        If the optional symlinks flag is true, symbolic links in the\n        source tree result in symbolic links in the destination tree; if\n        it is false, the contents of the files pointed to by symbolic\n        links are copied. If the file pointed by the symlink doesn't\n        exist, an exception will be added in the list of errors raised in\n        an Error exception at the end of the copy process.\n    \n        You can set the optional ignore_dangling_symlinks flag to true if you\n        want to silence this exception. Notice that this has no effect on\n        platforms that don't support os.symlink.\n    \n        The optional ignore argument is a callable. If given, it\n        is called with the `src` parameter, which is the directory\n        being visited by copytree(), and `names` which is the list of\n        `src` contents, as returned by os.listdir():\n    \n            callable(src, names) -> ignored_names\n    \n        Since copytree() is called recursively, the callable will be\n        called once for each directory that is copied. It returns a\n        list of names relative to the `src` directory that should\n        not be copied.\n    \n        The optional copy_function argument is a callable that will be used\n        to copy each file. It will be called with the source path and the\n        destination path as arguments. By default, copy2() is used, but any\n        function that supports the same signature (like copy()) can be used.\n    \n        \"\"\"\n>       names = os.listdir(src)\nE       FileNotFoundError: [WinError 3] The system cannot find the path specified: './resources/drivers/geckodriver'\n\nC:\\Users\\PriyaPramod\\AppData\\Local\\Programs\\Python\\Python36-32\\lib\\shutil.py:309: FileNotFoundError",
  "flaky" : false,
  "beforeStages" : [ {
    "name" : "configuration",
    "time" : {
      "start" : 1550259252974,
      "stop" : 1550259253021,
      "duration" : 47
    },
    "status" : "broken",
    "statusMessage" : "FileNotFoundError: [WinError 3] The system cannot find the path specified: './resources/drivers/geckodriver'\n",
    "statusTrace" : "  File \"C:\\Users\\PriyaPramod\\AppData\\Local\\Programs\\Python\\Python36-32\\lib\\site-packages\\pluggy\\callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\n  File \"C:\\Users\\PriyaPramod\\AppData\\Local\\Programs\\Python\\Python36-32\\lib\\site-packages\\_pytest\\fixtures.py\", line 929, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"C:\\Users\\PriyaPramod\\AppData\\Local\\Programs\\Python\\Python36-32\\lib\\site-packages\\_pytest\\fixtures.py\", line 784, in call_fixture_func\n    res = next(it)\n  File \"D:\\AutomationDevelopment\\ActiTime\\conftest.py\", line 34, in configuration\n    web_driver = create_driver(request.param, url)\n  File \"D:\\AutomationDevelopment\\ActiTime\\source\\lib\\webdriver_manager.py\", line 11, in create_driver\n    driver = webdriver.Firefox(constants.GECKO_PATH)\n  File \"C:\\Users\\PriyaPramod\\AppData\\Local\\Programs\\Python\\Python36-32\\lib\\site-packages\\selenium\\webdriver\\firefox\\webdriver.py\", line 151, in __init__\n    firefox_profile = FirefoxProfile(firefox_profile)\n  File \"C:\\Users\\PriyaPramod\\AppData\\Local\\Programs\\Python\\Python36-32\\lib\\site-packages\\selenium\\webdriver\\firefox\\firefox_profile.py\", line 80, in __init__\n    ignore=shutil.ignore_patterns(\"parent.lock\", \"lock\", \".parentlock\"))\n  File \"C:\\Users\\PriyaPramod\\AppData\\Local\\Programs\\Python\\Python36-32\\lib\\shutil.py\", line 309, in copytree\n    names = os.listdir(src)\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "FileNotFoundError: [WinError 3] The system cannot find the path specified: './resources/drivers/geckodriver'",
    "statusTrace" : "request = <SubRequest 'configuration' for <Function test_script_one[Firefox]>>\n\n    @pytest.fixture(scope=\"function\", autouse=True, params=[\"Chrome\", \"Firefox\"])\n    def configuration(request):\n        # browser_name = excel.get_cell_value(constants.EXCEL_PATH, \"BrowserSetting\", 0, \"Browser\")\n        url = excel.get_cell_value(constants.EXCEL_PATH, \"BrowserSetting\", 0, \"URL\")\n        web_driver = None\n        if request.param == \"Chrome\":\n            web_driver = create_driver(request.param, url)\n        elif request.param == \"Firefox\":\n>           web_driver = create_driver(request.param, url)\n\nconftest.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsource\\lib\\webdriver_manager.py:11: in create_driver\n    driver = webdriver.Firefox(constants.GECKO_PATH)\nC:\\Users\\PriyaPramod\\AppData\\Local\\Programs\\Python\\Python36-32\\lib\\site-packages\\selenium\\webdriver\\firefox\\webdriver.py:151: in __init__\n    firefox_profile = FirefoxProfile(firefox_profile)\nC:\\Users\\PriyaPramod\\AppData\\Local\\Programs\\Python\\Python36-32\\lib\\site-packages\\selenium\\webdriver\\firefox\\firefox_profile.py:80: in __init__\n    ignore=shutil.ignore_patterns(\"parent.lock\", \"lock\", \".parentlock\"))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsrc = './resources/drivers/geckodriver'\ndst = 'C:\\\\Users\\\\PRIYAP~1\\\\AppData\\\\Local\\\\Temp\\\\tmpnkrxubmz\\\\webdriver-py-profilecopy'\nsymlinks = False\nignore = <function ignore_patterns.<locals>._ignore_patterns at 0x08F5DED0>\ncopy_function = <function copy2 at 0x034B29C0>, ignore_dangling_symlinks = False\n\n    def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n                 ignore_dangling_symlinks=False):\n        \"\"\"Recursively copy a directory tree.\n    \n        The destination directory must not already exist.\n        If exception(s) occur, an Error is raised with a list of reasons.\n    \n        If the optional symlinks flag is true, symbolic links in the\n        source tree result in symbolic links in the destination tree; if\n        it is false, the contents of the files pointed to by symbolic\n        links are copied. If the file pointed by the symlink doesn't\n        exist, an exception will be added in the list of errors raised in\n        an Error exception at the end of the copy process.\n    \n        You can set the optional ignore_dangling_symlinks flag to true if you\n        want to silence this exception. Notice that this has no effect on\n        platforms that don't support os.symlink.\n    \n        The optional ignore argument is a callable. If given, it\n        is called with the `src` parameter, which is the directory\n        being visited by copytree(), and `names` which is the list of\n        `src` contents, as returned by os.listdir():\n    \n            callable(src, names) -> ignored_names\n    \n        Since copytree() is called recursively, the callable will be\n        called once for each directory that is copied. It returns a\n        list of names relative to the `src` directory that should\n        not be copied.\n    \n        The optional copy_function argument is a callable that will be used\n        to copy each file. It will be called with the source path and the\n        destination path as arguments. By default, copy2() is used, but any\n        function that supports the same signature (like copy()) can be used.\n    \n        \"\"\"\n>       names = os.listdir(src)\nE       FileNotFoundError: [WinError 3] The system cannot find the path specified: './resources/drivers/geckodriver'\n\nC:\\Users\\PriyaPramod\\AppData\\Local\\Programs\\Python\\Python36-32\\lib\\shutil.py:309: FileNotFoundError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "b013e7c4514913a8",
      "name" : "log",
      "source" : "b013e7c4514913a8.txt",
      "type" : "text/plain",
      "size" : 0
    }, {
      "uid" : "12606fe8dbba51ab",
      "name" : "stdout",
      "source" : "12606fe8dbba51ab.txt",
      "type" : "text/plain",
      "size" : 0
    }, {
      "uid" : "132ffe60d390caa4",
      "name" : "stderr",
      "source" : "132ffe60d390caa4.txt",
      "type" : "text/plain",
      "size" : 0
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 0,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "test_scripts"
  }, {
    "name" : "suite",
    "value" : "test_sample"
  }, {
    "name" : "host",
    "value" : "TY-Pramod-Personal"
  }, {
    "name" : "thread",
    "value" : "6504-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_scripts.test_sample"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "configuration",
    "value" : "'Firefox'"
  } ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "244245d2defd4f61.json",
  "parameterValues" : [ "'Firefox'" ]
}